# These are various coursework analyses 
--Basic relational database analysis
-- TELECOM DATA TABLE #1: products
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    speed_mbps INTEGER,
    data_limit_gb INTEGER,
    monthly_price DECIMAL(8, 2)
);

INSERT INTO products (product_id, product_name, product_type, speed_mbps, data_limit_gb, monthly_price)
VALUES
    (1, 'High-Speed Internet', 'Internet', 100, 500, 49.99),
    (2, 'Unlimited Data Plan', 'Cell Phone Service', NULL, NULL, 35.00),
    (3, 'Premium TV Package', 'TV Package', NULL, NULL, 79.99),
    (4, 'Fiber Optic Internet', 'Internet', 500, 1000, 79.99),
    (5, 'Family Plan', 'Cell Phone Service', NULL, NULL, 25.00);
    
    
-- TELECOM DATA TABLE #2: customer_subscriptions
CREATE TABLE customer_subscriptions (
    customer_id TEXT PRIMARY KEY,
    product_id INTEGER,
    price DECIMAL(8, 2),
    email TEXT,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

INSERT INTO customer_subscriptions (customer_id, product_id, price, email)
VALUES
    ('123456789012', 1, 49.99, 'john.doe@example.com'),
    ('234567890123', 2, 35.00, 'jane.smith@example.com'),
    ('345678901234', 3, 79.99, 'alice.davis@example.com'),
    ('456789012345', 4, 79.99, 'bob.johnson@example.com'),
    ('567890123456', 1, 49.99, 'susan.wilson@example.com');


-- product names of all the Internet products types
SELECT product_name 
FROM products
WHERE product_type = "Internet";

-- query all customers and products in subscriptions table
SELECT customer_id, product_id
FROM customer_subscriptions;

--customer IDs for all the customers who are subscribed to High-Speed Internet
SELECT customer_id 
FROM customer_subscriptions
WHERE product_id = 1;

--email addresses of all the customers who are subscribed to products with the "Internet" product type
--query email from T2
SELECT email
FROM customer_subscriptions
--relate email in T2 to T1 by customer_id 
--query customer_id in T1 if the product_type = "Internet"
WHERE customer_id IN (SELECT customer_id FROM products WHERE product_type = "Internet");


# Basic analysis HAVING 
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    department TEXT,
    salary DECIMAL(10, 2),
    years_of_experience INTEGER
);

INSERT INTO employees (employee_id, department, salary, years_of_experience)
VALUES
    (1, 'Finance', 60000.00, 5),
    (2, 'Marketing', 55000.00, 3),
    (3, 'Sales', 75000.00, 8),
    (4, 'Engineering', 80000.00, 7),
    (5, 'HR', 50000.00, 2),
    (6, 'Finance', 70000.00, 6),
    (7, 'Marketing', 60000.00, 4),
    (8, 'Sales', 85000.00, 10),
    (9, 'Engineering', 90000.00, 9),
    (10, 'HR', 55000.00, 3),
    (11, 'Sales', 72000.00, 6),
    (12, 'Sales', 80000.00, 7),
    (13, 'Engineering', 85000.00, 8),
    (14, 'Engineering', 92000.00, 10);
--show department name and the total spent on(sum of) salaries in that department per year where the total sum of salaries is at least $300,000

SELECT department, SUM(salary) AS total_spent
FROM employees
GROUP BY department
--because new column is an aggregate use HAVING 
HAVING total_spent >= 300000;

--departments that pay an average of at least $70,000 per year

SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department
--because new column is an aggregate use HAVING 
HAVING avg_salary >= 70000;

#Basic Analysis CASE
CREATE TABLE marathon (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
   participant_name TEXT,
   previous_experience TEXT,
   completion_fraction REAL);

INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Sadie Hawkins", "yes", 1);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Brandon Flowers", "no", 0.241);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Michael Scott", "no", 0.804);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Karamo Brown", "yes", 0.9512);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Antoni Porowski", "yes", 0.640);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Rajnighanda Kapoor", "no", 1);

--Select every participant name and the percent of the marathon that they completed
SELECT participant_name, round(completion_fraction*100,1) AS completion_percent
FROM marathon;

--how many(count) employees completed each quarter of the marathon (CASE 75% or more, 50%, 25%, or under 25%)
--query count of rows of each case in newly added column for % case text
SELECT COUNT(participant_name) AS total_employees, CASE WHEN completion_fraction >=0.75 THEN "75+%" 
WHEN completion_fraction >=0.50 THEN "50+%"
WHEN completion_fraction >=0.25 THEN "25+%" 
ELSE "under 25%" END AS percent_complete
FROM marathon
GROUP BY percent_complete;
